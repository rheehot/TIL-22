(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{203:function(t,e,s){"use strict";s.r(e);var r=s(0),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),s("p",[t._v("파이썬 3.2에 소개되었고, 2.5 이후버전 부터 이용할 수 있는 "),s("code",[t._v("concurrent.futures")]),t._v(' 라이브러리에 대해서 살펴본다. 미셸 시미오나토는 "'),s("a",{attrs:{href:"http://bit.ly/1JIrYZQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("파이썬에서의 스레드, 프로세스, 동시성에 대한 소고 - 다중코어 혁명에 대한 과대광고의 제거 및 스레드와 여러 동시성 방식에 대한 타당성 있는 (희망사항) 이야기"),s("OutboundLink")],1),t._v('"에서 패턴을 설명하고 있다. 비동기 작업을 나타내는 '),s("code",[t._v("Future")]),t._v(" 객체의 개념을 살펴보자.")]),t._m(1),t._m(2),t._m(3),s("p",[t._v("메인코드만 보면, 다음과 같다.")]),t._m(4),s("p",[t._v("여기서 케네스 레이츠가 만든 requests 라이브러리는 파이썬3 표준라이브러리인 urllib.request 모듈보다 강력하고 사용하기 쉽다. 또한 파이썬2의 urllib2가 이름이 바뀐반면, requests는 2.6이후 버전이 호환된다.")]),t._m(5),s("p",[t._v("주요 코드는 다음과 같다.")]),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),s("p",[t._v("CPython 인터프리터는 내부적으로 스레드 안전하지 않아서, GIL (Global Interpreter Lock)를 두고 있다. GIL은 한 번에 한 쓰레드만 파이썬 바이트코드를 실행토록 하는데, 파이썬 언어의 제한요소는 아니고, CPython 구현체의 제한이다. 물론 PyPy도 GIL를 가지고 있다.")]),s("p",[t._v("내장함수나 C확장 모듈은 GIL를 해제할 수 있는데, 보통 개발자는 이런 걸 구현하지 않는다. 블로킹 입출력을 실행하는 모든 표준 라이브러리 함수는 OS 결과를 기다리는 동안 GIL를 해제하기 때문에 입출력 위주 작업에서 이득을 볼 수 있다.")]),s("p",[t._v("데이비드 비즐리는 '파이썬 쓰레드는 아주 능숙하게 게으름을 피운다' 라고 \""),s("a",{attrs:{href:"http://www.dabeaz.com/finalgenerator/",target:"_blank",rel:"noopener noreferrer"}},[t._v("제너레이터: 최후의 개척자 106번째 슬라이드"),s("OutboundLink")],1),t._v('"에서 말했다.')]),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/fluentpython/example-code/tree/master/17-futures/countries",target:"_blank",rel:"noopener noreferrer"}},[t._v("예제코드"),s("OutboundLink")],1),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/fluentpython/example-code/blob/master/17-futures/countries/flags2_common.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("flags2_common.py"),s("OutboundLink")],1)]),s("li",[s("a",{attrs:{href:"https://github.com/fluentpython/example-code/blob/master/17-futures/countries/flags2_sequential.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("flags2_sequential.py"),s("OutboundLink")],1)]),s("li",[s("a",{attrs:{href:"https://github.com/fluentpython/example-code/blob/master/17-futures/countries/flags2_threadpool.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("flags2_threadpool.py"),s("OutboundLink")],1)]),s("li",[s("a",{attrs:{href:"https://github.com/fluentpython/example-code/blob/master/17-futures/countries/flags2_asyncio.py",target:"_blank",rel:"noopener noreferrer"}},[t._v("flags2_asyncio.py"),s("OutboundLink")],1)])])])]),s("p",[t._v("진행상황을 막대로 표시해주는 "),s("a",{attrs:{href:"https://github.com/noamraph/tqdm",target:"_blank",rel:"noopener noreferrer"}},[t._v("TQDM 패키지"),s("OutboundLink")],1),t._v(". "),s("code",[t._v("len()")]),t._v(" 메서드를 지원하는 반복형을 넘겨주거나, 예상 항목수를 두번째 인자로 받는다.")]),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),s("p",[t._v("파이썬은 0.9.8 (1993년)부터 스레드를 지원했고, 파이썬 3에서는 원래 thread 모듈 대신 threading 모듈을 사용하도록 권고하고 있다. 스레드 간의 데이터 전송은 queue 모듈을 이용할 수 있다.")]),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),s("p",[t._v('브라이언 퀸랜은 PyCon AU 2010에서 "'),s("a",{attrs:{href:"http://bit.ly/1JIuZJy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Future가 다가왔다!"),s("OutboundLink")],1),t._v('"라는 멋진 발표를 했다.')]),s("p",[s("code",[t._v("concurrent.futures")]),t._v(' 라이브러리는 "'),s("a",{attrs:{href:"https://www.python.org/dev/peps/pep-3148/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 3148 - futures - 계산의 비동기 실행"),s("OutboundLink")],1),t._v('"에서 공식 소개하고 있으며, 자바의 '),s("code",[t._v("java.util.concurrent")]),t._v(" 패키지에서 영향을 받았다고 한다.")]),s("p",[t._v('잰 팔라치의 "Parallel Programming with Python"에서 Celery 라이브러리를 다루면서, 장고에서 PDF 변환과 같이 무거운 작업을 다른 프로세스로 덜어내서 HTTP 응답 지연을 줄이는 방법을 소개한다.')]),t._m(32),t._m(33),s("p",[t._v('폴 부처의 "Seven Concurrency Models in Seven Weeks: When Threads Unravel"은 스레드나 콜백을 이용하지 않고 동시성을 사용할 수 잇는 방법을 설명하고, 최신의 대안을 제시한다.')]),s("p",[t._v("GIL에 관련해서는 링크만 몇가지 남긴다.")]),s("ul",[s("li",[s("a",{attrs:{href:"https://docs.python.org/3/faq/library.html#can-t-we-get-rid-of-the-global-interpreter-lock",target:"_blank",rel:"noopener noreferrer"}},[t._v("전역 인터프리터 락은 해제할 수 있는가?"),s("OutboundLink")],1)]),s("li",[t._v('귀도 반 로섬과 제시 놀러가 작성한 "'),s("a",{attrs:{href:"http://bit.ly/1HGtcBF",target:"_blank",rel:"noopener noreferrer"}},[t._v("GIL를 제거하는 것은 간단하지 않다"),s("OutboundLink")],1),t._v('"')]),s("li",[s("a",{attrs:{href:"http://bit.ly/1JIvgwd",target:"_blank",rel:"noopener noreferrer"}},[t._v("파이썬 스레드와 전역 인터프리터 락"),s("OutboundLink")],1)]),s("li",[s("a",{attrs:{href:"http://www.dabeaz.com/GIL",target:"_blank",rel:"noopener noreferrer"}},[t._v("파이썬 GIL의 이해"),s("OutboundLink")],1),t._v(": 여기서 54번 슬라이드에 파이썬 3.2에 소개된 새로운 GIL 벤치마크 테스트에서 20배나 처리시간이 느려지는 결과를 보여주기도 한다.")])]),s("p",[t._v("제시 놀러와 리차드 오드커크가 계산 위주의 어플리케이션 개발을 위해서 multiprocessing 패키지를 만들었다.\nmultiprocessing 패키지는 '"),s("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0371/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 371 - 표준 라이브러리에서 다중처리 패키지의 추가"),s("OutboundLink")],1),t._v("'에 소개되어 있다. 표준 문서 중 가장 긴 문서이며, 이 패키지는 concurrent.futures.ProcessPoolExecutor의 기반이다.")]),s("p",[t._v("스파크는 쉬운 파이썬 API를 제공한다. 파이썬 객체를 데이터로 사용할 수 있다.")]),s("p",[t._v("호와 부에노의 "),s("a",{attrs:{href:"https://pypi.python.org/pypi/lelo",target:"_blank",rel:"noopener noreferrer"}},[t._v("lelo 라이브러리"),s("OutboundLink")],1),t._v("와 냇 프라이스가 만든 "),s("a",{attrs:{href:"http://bit.ly/1HGtF6Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("python-parallelize 라이브러리"),s("OutboundLink")],1),t._v("는 여러 프로세서에서 작업들이 병렬로 처리하는 작업을 쉽게 구현할 수 있다. 두 패키지 모두 multiprocessing 모듈을 기반으로 하고 있으며, lelo는 "),s("code",[t._v("@parallel")]),t._v(" 데커레이터를 제공한다.")])])}),[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"_17장-future를-이용한-동시성"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17장-future를-이용한-동시성","aria-hidden":"true"}},[this._v("#")]),this._v(" 17장 Future를 이용한 동시성")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"예제-세-가지-스타일의-웹-내려받기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#예제-세-가지-스타일의-웹-내려받기","aria-hidden":"true"}},[this._v("#")]),this._v(" 예제: 세 가지 스타일의 웹 내려받기")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("20개국 국기이미지를 다운받는데, 차례대로 받는 경우 약 7초 정도가 걸리고, "),e("code",[this._v("concurrent.futures")]),this._v("와 "),e("code",[this._v("async")]),this._v("를 이용한 경우 1.3초 정도가 소요되었다. (당연하지만, DoS 공격으로 의심받을 수 있으므로, 테스트를 테스트서버에 하자.)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"순차적으로-다운받기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#순차적으로-다운받기","aria-hidden":"true"}},[this._v("#")]),this._v(" 순차적으로 다운받기")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" requests\n\nresp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" requests"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" resp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"concurrent-futures로-내려받기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-futures로-내려받기","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("concurrent.futures")]),this._v("로 내려받기")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("download_many")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    workers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAX_WROKERS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" futures"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ThreadPoolExecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("download_one"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sorted")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"future는-어디에"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#future는-어디에","aria-hidden":"true"}},[this._v("#")]),this._v(" Future는 어디에")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("Future")]),t._v("는 "),s("code",[t._v("concurrent.futures")]),t._v("와 "),s("code",[t._v("asyncio")]),t._v("의 핵심 컴포넌트인데, 사용자에게 잘 드러나지 않는다. 파이썬 3.4에서 "),s("code",[t._v("Future")]),t._v("는 양쪽 모듈에 각각 클래스로 존재하는데, 완료여부를 확정할 수 없는 지연된 계산을 표현하기 위해 사용된다. "),s("code",[t._v("Twisted")]),t._v("의 "),s("code",[t._v("Deferred")]),t._v("클래스, "),s("code",[t._v("Tornado")]),t._v("의 "),s("code",[t._v("Future")]),t._v(" 클래스, 자바스크립트의 "),s("code",[t._v("Promise")]),t._v(" 객체와 비슷하다. 대기중인 작업을 큐에 넣고, 완료 상태를 조사하고, 결과(혹은 예외)를 가져올 수 있도록 캡슐화되어있다.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("Future")]),t._v("객체는 사용자에 의해 직접 생성하지 않고, 동시성 프레임워크 상에서 생성하도록 작성해야 한다. 또한 클라이언트 코드에서 "),s("code",[t._v("Future")]),t._v("의 상태를 직접 변경하면 안 된다. 실행 완료 여부를 확인할 수 있는 "),s("code",[t._v("done()")]),t._v(" 메서드가 있긴한데, 일반적으로 완료시 통지해달라는 콜백함수를 주로 이용한다. "),s("code",[t._v("add_done_callback()")]),t._v(" 메서드가 그것이다.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("p",[s("code",[t._v("result()")]),t._v(" 메서드는 완료된 경우 콜러블의 결과를 반환하거나, 실행 시 발생한 예외를 다시 발생시킨다. 하지만, 작업이 완료되지 않았다면, 두 프레임워크 간의 작동 방식이 다르다. "),s("code",[t._v("concurrency.futures.Future")]),t._v(" 객체의 경우에는 결과가 나올때까지 호출자의 스레드를 블로킹한다. 선택적으로 "),s("code",[t._v("timeout")]),t._v(" 인수를 전달할 수 있다. 반면, "),s("code",[t._v("asyncio.Future.result()")]),t._v("는 시간 초과를 지원하지 않고, "),s("code",[t._v("yield from")]),t._v("를 사용해서 결과를 가져오는 방법을 선호한다. 전자는 "),s("code",[t._v("yield from")]),t._v("를 사용할 수 없다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("예제 17-3에서는 "),e("code",[this._v("ThreadPoolExecutor.map()")]),this._v("을 사용한 예를, 예제 17-4에서는 "),e("code",[this._v("concurrent.futures")]),this._v("를 사용한 예를 살펴보았다. 하지만 엄밀히 말하면, 지금 살펴본 예제는 파일을 병렬로 다운받지 못한다. 전역 인터프리터 락(Global Interpreter Lock, GIL)에 의해 제한되며, 단일 스레드로 실행된다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"블로킹-i-o와-gil"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#블로킹-i-o와-gil","aria-hidden":"true"}},[this._v("#")]),this._v(" 블로킹 I/O와 GIL")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"concurrent-futures로-프로세스-실행하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrent-futures로-프로세스-실행하기","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("concurrent.futures")]),this._v("로 프로세스 실행하기")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("ProcessPoolExecutor")]),this._v("는 GIL을 우회하여 모든 가용한 CPU를 사용한다. "),e("code",[this._v("ThreadPoolExecutor")]),this._v("와 동일하게 범용 "),e("code",[this._v("Executor")]),this._v(" 인터페이스를 구현하므로, 기존 예제를 쉽게 바꿔볼 수 있다.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("download_many")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    workers "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MAX_WORKERS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" futures"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ThreadPoolExecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("download_many")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" futures"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ProcessPoolExecutor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" executor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pass")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("거의 동일한 코드인데, 프로세스의 경우, 코어 갯수를 지정하지 않는 것만 다르다. 프로세스 수는 실제 코어수 이상을 지정하는 것이 의미가 없기 때문에, 주어진 자원을 최대한 이용한다는 의미정도로 이해된다. "),e("code",[this._v("ProcessPoolExecutor")]),this._v("는 계산 위주의 작업에서 효과가 있으며, 입출력 위주일 때는 "),e("code",[this._v("ThreadPoolExecutor")]),this._v("가 더 많은 워커를 사용할 수 있기 때문에 쓰레드 쪽이 성능이 더 좋다. 국기 다운로드 예제를 프로세스로 구현하면 1.3초에서 1.8초 정도로 더 느려졌다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("해시 예제에서 코어 갯수에 따라 성능 향상을 기대할 수 있었으며, PyPy를 이용하면 그 효과가 더 컸다. 계산 중심의 코드를 작성하면, "),e("code",[this._v("ProcessPoolExecutor")]),this._v("와 함께 PyPy를 이용하자.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"executor-map-실험"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#executor-map-실험","aria-hidden":"true"}},[this._v("#")]),e("code",[this._v("Executor.map()")]),this._v(" 실험")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("code",[this._v("Executor.map()")]),this._v("은 인수로 실행할 함수와 그 함수에 전달한 인자로 구성한다. 함수 호출 자체는 논블로킹이며, 리턴값은 제너레이터이다. 즉 생성은 한순간에 이루어지나, 값을 받아 오기 위해서 반복문을 걸면, 블로킹이 된다. 값은 제너레이터가 차례대로 실행되고, 차례대로 값을 받아오면서 종료한다. 따라서 다소 시간이 걸리는 작업이 배치되면, 뒷 순서의 작업들이 다음 턴을 받기 위해서 기다려야 한다. 순서와 상관없이 먼저 끝나는 것부터 받으려면 "),e("code",[this._v("Executor.submit()")]),this._v("과 "),e("code",[this._v("futures.as_completed()")]),this._v("를 이용해야 한다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"진행상황-출력하고-에러처리하기"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#진행상황-출력하고-에러처리하기","aria-hidden":"true"}},[this._v("#")]),this._v(" 진행상황 출력하고, 에러처리하기")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"flags2-예제에서-예외처리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flags2-예제에서-예외처리","aria-hidden":"true"}},[this._v("#")]),this._v(" flags2 예제에서 예외처리")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("개별 파일을 다운받는 코드("),e("code",[this._v("download_one()")]),this._v(")에서 404예외처리를 하고, 나머지 예외를 "),e("code",[this._v("raise")]),this._v("해주면, 이를 호출한 "),e("code",[this._v("download_many()")]),this._v(" 함수에서 처리한다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"futures-as-completed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#futures-as-completed","aria-hidden":"true"}},[this._v("#")]),this._v(" futures.as_completed()")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("비동기 처리가 되므로, 일단 모든 작업을 제출하고, futures.as_completed()의 제너레이터를 받아서 완료되는 작업부터 처리한다. "),e("code",[this._v("tqdm")]),this._v("과 결합한 코드는 다음과 같다.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("done_iter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" futures"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("as_completed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to_do_map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndone_iter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tqdm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tqdm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("down_iter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" total"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cc_list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" future "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" done_iter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" future"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"스레드-및-멀티프로세스의-대안"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#스레드-및-멀티프로세스의-대안","aria-hidden":"true"}},[this._v("#")]),this._v(" 스레드 및 멀티프로세스의 대안")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("계산 위주의 작업을 수행할 때는 GIL를 피해나가야 하므로 "),e("code",[this._v("futures.ProcessPoolExecutor")]),this._v("를 사용하여 간단하게 구현할 수 있다. 애플리케이션 구조가 이 클래스에 잘 맞지 않는 경우에는, threading API와 비슷한 multiprocessing 패키지를 이용할 수 있다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"요약"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#요약","aria-hidden":"true"}},[this._v("#")]),this._v(" 요약")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("본 장에서는 "),e("code",[this._v("concurrent.futures")]),this._v("와 "),e("code",[this._v("asyncio")]),this._v("에서 제공하는 Future 객체를 살펴보았는데, 18장에서 이 둘의 차이점에 대해서 자세히 살펴본다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("GIL이라는 제한이 있지만, 입출력 위주의 프로그램은 성능향상이 된다. 또한 C언어로 작성된 모든 표준 라이브러리는 GIL를 해제하므로, 다른 쓰레드를 이용할 수 있다. 계산 위주의 작업은 "),e("code",[this._v("ProcessPoolExecutor")]),this._v(" 혹은 "),e("code",[this._v("multiprocessing")]),this._v(" 패키지를 이용하여 성능향상을 기대할 수 있다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"읽을거리"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#읽을거리","aria-hidden":"true"}},[this._v("#")]),this._v(" 읽을거리")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v('데이비드 비즐리, 브라이언 K. 존스의 "Python Cookbook, 3E"에서는 gzip으로 압축된 아파치 로그파일을 '),e("code",[this._v("ProcessPoolExecutor")]),this._v("를 이용하여 분석하는 실용적인 예제를 소개한다.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v('브렛 슬랫킨의 "Effective Python"은 코루틴을 자세히 다루고, '),e("code",[this._v("concurrent.futures")]),this._v("를 이용하여 스레드 프로그래밍을 위한 락과 큐 사용법을 다루고 있다.")])}],!1,null,null,null);e.default=n.exports}}]);